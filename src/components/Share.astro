---
interface Props {
  title: string;
  url?: string;
}

const { title, url = Astro.url.href } = Astro.props;
---

<div class="fixed left-0 top-1/2 -translate-y-1/2 z-50 p-2 md:p-4 hidden md:flex flex-col space-y-4 bg-white/90 shadow-lg rounded-r-lg">
  <h3 class="sr-only">Share This Lesson</h3>
  <div class="flex flex-col space-y-3">
    <button
      class="share-button twitter text-gray-700 hover:text-blue-500"
      aria-label="Share on Twitter"
      data-share="twitter"
      data-title={title}
      data-url={url}
    >
      <i class="fab fa-twitter text-2xl"></i>
    </button>

    <button
      class="share-button facebook text-gray-700 hover:text-blue-700"
      aria-label="Share on Facebook"
      data-share="facebook"
      data-title={title}
      data-url={url}
    >
      <i class="fab fa-facebook-f text-2xl"></i>
    </button>

    <button
      class="share-button whatsapp text-gray-700 hover:text-green-500"
      aria-label="Share on WhatsApp"
      data-share="whatsapp"
      data-title={title}
      data-url={url}
    >
      <i class="fab fa-whatsapp text-2xl"></i>
    </button>
  </div>
</div>

<script>
  function addUtmParams(url: string) {
    const utmParams = new URLSearchParams({
      utm_source: 'website',
      utm_medium: 'social_share',
      utm_campaign: 'lesson_share',
    });
    return `${url}${url.includes('?') ? '&' : '?'}${utmParams.toString()}`;
  }

  function share(platform: string, title: string, url: string) {
    const shareUrl = addUtmParams(url);
    const encodedTitle = encodeURIComponent(title);
    const encodedUrl = encodeURIComponent(shareUrl);

    const urls: { [key: string]: string } = {
      twitter: `https://twitter.com/intent/tweet?text=${encodedTitle}&url=${encodedUrl}`,
      facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`,
      whatsapp: `https://api.whatsapp.com/send?text=${encodedTitle}%0A${encodedUrl}`,
    };

    window.open(urls[platform], '_blank', 'noopener,noreferrer');
  }

  document.querySelectorAll('[data-share]').forEach((button) => {
    button.addEventListener('click', (e) => {
      const el = e.currentTarget as HTMLElement;
      const platform = el.dataset.share;
      const title = el.dataset.title;
      const url = el.dataset.url;

      if (platform && title && url) {
        share(platform, title, url);
      }
    });
  });
</script>

<style>
  .share-section {
    display: none; /* Hide the original share section */
  }

  .share-button {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 48px; /* Fixed width for icon buttons */
    height: 48px; /* Fixed height for icon buttons */
    border: none;
    border-radius: 50%; /* Make them circular */
    background: none; /* No background, icons will handle color */
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .share-button:hover {
    transform: scale(1.1); /* Slightly enlarge on hover */
    opacity: 0.8;
  }

  /* Specific color adjustments for hover, if needed, can be handled by Tailwind classes */
  /* .twitter:hover { color: #1DA1F2; } */
  /* .facebook:hover { color: #1877F2; } */
  /* .whatsapp:hover { color: #25D366; } */
</style>
